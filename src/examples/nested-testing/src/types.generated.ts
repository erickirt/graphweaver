/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
};

export type AdminUiEntityAttributeMetadata = {
  __typename?: 'AdminUiEntityAttributeMetadata';
  clientGeneratedPrimaryKeys?: Maybe<Scalars['Boolean']['output']>;
  exportPageSize?: Maybe<Scalars['Float']['output']>;
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
  __typename?: 'AdminUiEntityMetadata';
  attributes: AdminUiEntityAttributeMetadata;
  backendDisplayName?: Maybe<Scalars['String']['output']>;
  backendId?: Maybe<Scalars['String']['output']>;
  defaultFilter?: Maybe<Scalars['JSON']['output']>;
  defaultSort?: Maybe<Scalars['JSON']['output']>;
  excludeFromTracing: Scalars['Boolean']['output'];
  fieldForDetailPanelNavigationId: Scalars['String']['output'];
  fields: Array<AdminUiFieldMetadata>;
  hideInSideBar: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  primaryKeyField: Scalars['String']['output'];
  summaryField?: Maybe<Scalars['String']['output']>;
  supportedAggregationTypes: Array<AggregationType>;
  supportsPseudoCursorPagination: Scalars['Boolean']['output'];
};

export type AdminUiEnumMetadata = {
  __typename?: 'AdminUiEnumMetadata';
  name: Scalars['String']['output'];
  values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
  __typename?: 'AdminUiEnumValueMetadata';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
  __typename?: 'AdminUiFieldAttributeMetadata';
  isReadOnly: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
};

export type AdminUiFieldExtensionsMetadata = {
  __typename?: 'AdminUiFieldExtensionsMetadata';
  key?: Maybe<Scalars['String']['output']>;
};

export type AdminUiFieldMetadata = {
  __typename?: 'AdminUiFieldMetadata';
  attributes?: Maybe<AdminUiFieldAttributeMetadata>;
  detailPanelInputComponent?: Maybe<DetailPanelInputComponent>;
  extensions?: Maybe<AdminUiFieldExtensionsMetadata>;
  filter?: Maybe<AdminUiFilterMetadata>;
  hideInDetailForm?: Maybe<Scalars['Boolean']['output']>;
  hideInFilterBar?: Maybe<Scalars['Boolean']['output']>;
  hideInTable?: Maybe<Scalars['Boolean']['output']>;
  isArray?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  relatedEntity?: Maybe<Scalars['String']['output']>;
  relationshipType?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
  __typename?: 'AdminUiFilterMetadata';
  options?: Maybe<Scalars['JSON']['output']>;
  type: AdminUiFilterType;
};

export enum AdminUiFilterType {
  Boolean = 'BOOLEAN',
  DateRange = 'DATE_RANGE',
  DateTimeRange = 'DATE_TIME_RANGE',
  DropDownText = 'DROP_DOWN_TEXT',
  Enum = 'ENUM',
  Numeric = 'NUMERIC',
  NumericRange = 'NUMERIC_RANGE',
  Relationship = 'RELATIONSHIP',
  Text = 'TEXT'
}

export type AdminUiMetadata = {
  __typename?: 'AdminUiMetadata';
  entities: Array<AdminUiEntityMetadata>;
  enums: Array<AdminUiEnumMetadata>;
};

export type AggregationResult = {
  __typename?: 'AggregationResult';
  count: Scalars['Int']['output'];
};

export enum AggregationType {
  Count = 'COUNT'
}

export type Childwithbackendid = {
  __typename?: 'Childwithbackendid';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  rootwithbackendid?: Maybe<Rootwithbackendid>;
  rootwithbackendid_aggregate?: Maybe<AggregationResult>;
  rootwithclientid?: Maybe<Rootwithclientid>;
  rootwithclientid_aggregate?: Maybe<AggregationResult>;
};


export type ChildwithbackendidRootwithbackendidArgs = {
  filter?: InputMaybe<RootwithbackendidsListFilter>;
};


export type ChildwithbackendidRootwithbackendid_AggregateArgs = {
  filter?: InputMaybe<RootwithbackendidsListFilter>;
};


export type ChildwithbackendidRootwithclientidArgs = {
  filter?: InputMaybe<RootwithclientidsListFilter>;
};


export type ChildwithbackendidRootwithclientid_AggregateArgs = {
  filter?: InputMaybe<RootwithclientidsListFilter>;
};

/** Data needed to create or update Childwithbackendids. If an ID is passed, this is an update, otherwise it's an insert. */
export type ChildwithbackendidCreateOrUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  rootwithbackendid?: InputMaybe<RootwithbackendidCreateOrUpdateInput>;
  rootwithclientid?: InputMaybe<RootwithclientidCreateOrUpdateInput>;
};

/** Data needed to create Childwithbackendids. */
export type ChildwithbackendidInsertInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  rootwithbackendid?: InputMaybe<RootwithbackendidCreateOrUpdateInput>;
  rootwithclientid?: InputMaybe<RootwithclientidCreateOrUpdateInput>;
};

/** Data needed to update Childwithbackendids. An ID must be passed. */
export type ChildwithbackendidUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  rootwithbackendid?: InputMaybe<RootwithbackendidCreateOrUpdateInput>;
  rootwithclientid?: InputMaybe<RootwithclientidCreateOrUpdateInput>;
};

export type ChildwithbackendidsListFilter = {
  _and?: InputMaybe<Array<InputMaybe<ChildwithbackendidsListFilter>>>;
  _not?: InputMaybe<ChildwithbackendidsListFilter>;
  _or?: InputMaybe<Array<InputMaybe<ChildwithbackendidsListFilter>>>;
  description?: InputMaybe<Scalars['String']['input']>;
  description_gt?: InputMaybe<Scalars['String']['input']>;
  description_gte?: InputMaybe<Scalars['String']['input']>;
  description_ilike?: InputMaybe<Scalars['String']['input']>;
  description_in?: InputMaybe<Array<Scalars['String']['input']>>;
  description_like?: InputMaybe<Scalars['String']['input']>;
  description_lt?: InputMaybe<Scalars['String']['input']>;
  description_lte?: InputMaybe<Scalars['String']['input']>;
  description_ne?: InputMaybe<Scalars['String']['input']>;
  description_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  description_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  description_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  rootwithbackendid?: InputMaybe<RootwithbackendidsListFilter>;
  rootwithclientid?: InputMaybe<RootwithclientidsListFilter>;
};

export type ChildwithbackendidsOrderByInput = {
  description?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
};

/** Pagination options for Childwithbackendids. */
export type ChildwithbackendidsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ChildwithbackendidsOrderByInput>;
};

export type Childwithclientid = {
  __typename?: 'Childwithclientid';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  rootwithbackendid?: Maybe<Rootwithbackendid>;
  rootwithbackendid_aggregate?: Maybe<AggregationResult>;
  rootwithclientid?: Maybe<Rootwithclientid>;
  rootwithclientid_aggregate?: Maybe<AggregationResult>;
};


export type ChildwithclientidRootwithbackendidArgs = {
  filter?: InputMaybe<RootwithbackendidsListFilter>;
};


export type ChildwithclientidRootwithbackendid_AggregateArgs = {
  filter?: InputMaybe<RootwithbackendidsListFilter>;
};


export type ChildwithclientidRootwithclientidArgs = {
  filter?: InputMaybe<RootwithclientidsListFilter>;
};


export type ChildwithclientidRootwithclientid_AggregateArgs = {
  filter?: InputMaybe<RootwithclientidsListFilter>;
};

/** Data needed to create or update Childwithclientids. If an ID is passed, this is an update, otherwise it's an insert. */
export type ChildwithclientidCreateOrUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  rootwithbackendid?: InputMaybe<RootwithbackendidCreateOrUpdateInput>;
  rootwithclientid?: InputMaybe<RootwithclientidCreateOrUpdateInput>;
};

/** Data needed to create Childwithclientids. */
export type ChildwithclientidInsertInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  rootwithbackendid?: InputMaybe<RootwithbackendidCreateOrUpdateInput>;
  rootwithclientid?: InputMaybe<RootwithclientidCreateOrUpdateInput>;
};

/** Data needed to update Childwithclientids. An ID must be passed. */
export type ChildwithclientidUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  rootwithbackendid?: InputMaybe<RootwithbackendidCreateOrUpdateInput>;
  rootwithclientid?: InputMaybe<RootwithclientidCreateOrUpdateInput>;
};

export type ChildwithclientidsListFilter = {
  _and?: InputMaybe<Array<InputMaybe<ChildwithclientidsListFilter>>>;
  _not?: InputMaybe<ChildwithclientidsListFilter>;
  _or?: InputMaybe<Array<InputMaybe<ChildwithclientidsListFilter>>>;
  description?: InputMaybe<Scalars['String']['input']>;
  description_gt?: InputMaybe<Scalars['String']['input']>;
  description_gte?: InputMaybe<Scalars['String']['input']>;
  description_ilike?: InputMaybe<Scalars['String']['input']>;
  description_in?: InputMaybe<Array<Scalars['String']['input']>>;
  description_like?: InputMaybe<Scalars['String']['input']>;
  description_lt?: InputMaybe<Scalars['String']['input']>;
  description_lte?: InputMaybe<Scalars['String']['input']>;
  description_ne?: InputMaybe<Scalars['String']['input']>;
  description_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  description_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  description_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  rootwithbackendid?: InputMaybe<RootwithbackendidsListFilter>;
  rootwithclientid?: InputMaybe<RootwithclientidsListFilter>;
};

export type ChildwithclientidsOrderByInput = {
  description?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
};

/** Pagination options for Childwithclientids. */
export type ChildwithclientidsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ChildwithclientidsOrderByInput>;
};

export type DeleteOneFilterInput = {
  id: Scalars['ID']['input'];
};

export type DetailPanelInputComponent = {
  __typename?: 'DetailPanelInputComponent';
  name: DetailPanelInputComponentOption;
  options?: Maybe<Scalars['JSON']['output']>;
};

export enum DetailPanelInputComponentOption {
  Markdown = 'MARKDOWN',
  RichText = 'RICH_TEXT',
  Text = 'TEXT'
}

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a single Childwithbackendid. */
  createChildwithbackendid?: Maybe<Childwithbackendid>;
  /** Create many Childwithbackendids. */
  createChildwithbackendids?: Maybe<Array<Maybe<Childwithbackendid>>>;
  /** Create a single Childwithclientid. */
  createChildwithclientid?: Maybe<Childwithclientid>;
  /** Create many Childwithclientids. */
  createChildwithclientids?: Maybe<Array<Maybe<Childwithclientid>>>;
  /** Create or update many Childwithbackendids. */
  createOrUpdateChildwithbackendids?: Maybe<Array<Maybe<Childwithbackendid>>>;
  /** Create or update many Childwithclientids. */
  createOrUpdateChildwithclientids?: Maybe<Array<Maybe<Childwithclientid>>>;
  /** Create or update many Rootwithbackendids. */
  createOrUpdateRootwithbackendids?: Maybe<Array<Maybe<Rootwithbackendid>>>;
  /** Create or update many Rootwithclientids. */
  createOrUpdateRootwithclientids?: Maybe<Array<Maybe<Rootwithclientid>>>;
  /** Create a single Rootwithbackendid. */
  createRootwithbackendid?: Maybe<Rootwithbackendid>;
  /** Create many Rootwithbackendids. */
  createRootwithbackendids?: Maybe<Array<Maybe<Rootwithbackendid>>>;
  /** Create a single Rootwithclientid. */
  createRootwithclientid?: Maybe<Rootwithclientid>;
  /** Create many Rootwithclientids. */
  createRootwithclientids?: Maybe<Array<Maybe<Rootwithclientid>>>;
  /** Delete a single Childwithbackendid. */
  deleteChildwithbackendid?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Childwithbackendids with a filter. */
  deleteChildwithbackendids?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Childwithclientid. */
  deleteChildwithclientid?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Childwithclientids with a filter. */
  deleteChildwithclientids?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Rootwithbackendid. */
  deleteRootwithbackendid?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Rootwithbackendids with a filter. */
  deleteRootwithbackendids?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Rootwithclientid. */
  deleteRootwithclientid?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Rootwithclientids with a filter. */
  deleteRootwithclientids?: Maybe<Scalars['Boolean']['output']>;
  /** Update a single Childwithbackendid. */
  updateChildwithbackendid?: Maybe<Childwithbackendid>;
  /** Update many Childwithbackendids. */
  updateChildwithbackendids?: Maybe<Array<Maybe<Childwithbackendid>>>;
  /** Update a single Childwithclientid. */
  updateChildwithclientid?: Maybe<Childwithclientid>;
  /** Update many Childwithclientids. */
  updateChildwithclientids?: Maybe<Array<Maybe<Childwithclientid>>>;
  /** Update a single Rootwithbackendid. */
  updateRootwithbackendid?: Maybe<Rootwithbackendid>;
  /** Update many Rootwithbackendids. */
  updateRootwithbackendids?: Maybe<Array<Maybe<Rootwithbackendid>>>;
  /** Update a single Rootwithclientid. */
  updateRootwithclientid?: Maybe<Rootwithclientid>;
  /** Update many Rootwithclientids. */
  updateRootwithclientids?: Maybe<Array<Maybe<Rootwithclientid>>>;
};


export type MutationCreateChildwithbackendidArgs = {
  input: ChildwithbackendidInsertInput;
};


export type MutationCreateChildwithbackendidsArgs = {
  input: Array<ChildwithbackendidInsertInput>;
};


export type MutationCreateChildwithclientidArgs = {
  input: ChildwithclientidInsertInput;
};


export type MutationCreateChildwithclientidsArgs = {
  input: Array<ChildwithclientidInsertInput>;
};


export type MutationCreateOrUpdateChildwithbackendidsArgs = {
  input: Array<ChildwithbackendidCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateChildwithclientidsArgs = {
  input: Array<ChildwithclientidCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateRootwithbackendidsArgs = {
  input: Array<RootwithbackendidCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateRootwithclientidsArgs = {
  input: Array<RootwithclientidCreateOrUpdateInput>;
};


export type MutationCreateRootwithbackendidArgs = {
  input: RootwithbackendidInsertInput;
};


export type MutationCreateRootwithbackendidsArgs = {
  input: Array<RootwithbackendidInsertInput>;
};


export type MutationCreateRootwithclientidArgs = {
  input: RootwithclientidInsertInput;
};


export type MutationCreateRootwithclientidsArgs = {
  input: Array<RootwithclientidInsertInput>;
};


export type MutationDeleteChildwithbackendidArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteChildwithbackendidsArgs = {
  filter: ChildwithbackendidsListFilter;
};


export type MutationDeleteChildwithclientidArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteChildwithclientidsArgs = {
  filter: ChildwithclientidsListFilter;
};


export type MutationDeleteRootwithbackendidArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteRootwithbackendidsArgs = {
  filter: RootwithbackendidsListFilter;
};


export type MutationDeleteRootwithclientidArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteRootwithclientidsArgs = {
  filter: RootwithclientidsListFilter;
};


export type MutationUpdateChildwithbackendidArgs = {
  input: ChildwithbackendidUpdateInput;
};


export type MutationUpdateChildwithbackendidsArgs = {
  input: Array<ChildwithbackendidUpdateInput>;
};


export type MutationUpdateChildwithclientidArgs = {
  input: ChildwithclientidUpdateInput;
};


export type MutationUpdateChildwithclientidsArgs = {
  input: Array<ChildwithclientidUpdateInput>;
};


export type MutationUpdateRootwithbackendidArgs = {
  input: RootwithbackendidUpdateInput;
};


export type MutationUpdateRootwithbackendidsArgs = {
  input: Array<RootwithbackendidUpdateInput>;
};


export type MutationUpdateRootwithclientidArgs = {
  input: RootwithclientidUpdateInput;
};


export type MutationUpdateRootwithclientidsArgs = {
  input: Array<RootwithclientidUpdateInput>;
};

export type Query = {
  __typename?: 'Query';
  /** Query used by the Admin UI to introspect the schema and metadata. */
  _graphweaver?: Maybe<AdminUiMetadata>;
  /** Get a single Childwithbackendid. */
  childwithbackendid?: Maybe<Childwithbackendid>;
  /** Get multiple Childwithbackendids. */
  childwithbackendids?: Maybe<Array<Maybe<Childwithbackendid>>>;
  /** Get aggregated data for Childwithbackendids. */
  childwithbackendids_aggregate?: Maybe<AggregationResult>;
  /** Get a single Childwithclientid. */
  childwithclientid?: Maybe<Childwithclientid>;
  /** Get multiple Childwithclientids. */
  childwithclientids?: Maybe<Array<Maybe<Childwithclientid>>>;
  /** Get aggregated data for Childwithclientids. */
  childwithclientids_aggregate?: Maybe<AggregationResult>;
  /** Get a single Rootwithbackendid. */
  rootwithbackendid?: Maybe<Rootwithbackendid>;
  /** Get multiple Rootwithbackendids. */
  rootwithbackendids?: Maybe<Array<Maybe<Rootwithbackendid>>>;
  /** Get aggregated data for Rootwithbackendids. */
  rootwithbackendids_aggregate?: Maybe<AggregationResult>;
  /** Get a single Rootwithclientid. */
  rootwithclientid?: Maybe<Rootwithclientid>;
  /** Get multiple Rootwithclientids. */
  rootwithclientids?: Maybe<Array<Maybe<Rootwithclientid>>>;
  /** Get aggregated data for Rootwithclientids. */
  rootwithclientids_aggregate?: Maybe<AggregationResult>;
};


export type QueryChildwithbackendidArgs = {
  id: Scalars['ID']['input'];
};


export type QueryChildwithbackendidsArgs = {
  filter?: InputMaybe<ChildwithbackendidsListFilter>;
  pagination?: InputMaybe<ChildwithbackendidsPaginationInput>;
};


export type QueryChildwithbackendids_AggregateArgs = {
  filter?: InputMaybe<ChildwithbackendidsListFilter>;
};


export type QueryChildwithclientidArgs = {
  id: Scalars['ID']['input'];
};


export type QueryChildwithclientidsArgs = {
  filter?: InputMaybe<ChildwithclientidsListFilter>;
  pagination?: InputMaybe<ChildwithclientidsPaginationInput>;
};


export type QueryChildwithclientids_AggregateArgs = {
  filter?: InputMaybe<ChildwithclientidsListFilter>;
};


export type QueryRootwithbackendidArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRootwithbackendidsArgs = {
  filter?: InputMaybe<RootwithbackendidsListFilter>;
  pagination?: InputMaybe<RootwithbackendidsPaginationInput>;
};


export type QueryRootwithbackendids_AggregateArgs = {
  filter?: InputMaybe<RootwithbackendidsListFilter>;
};


export type QueryRootwithclientidArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRootwithclientidsArgs = {
  filter?: InputMaybe<RootwithclientidsListFilter>;
  pagination?: InputMaybe<RootwithclientidsPaginationInput>;
};


export type QueryRootwithclientids_AggregateArgs = {
  filter?: InputMaybe<RootwithclientidsListFilter>;
};

export type Rootwithbackendid = {
  __typename?: 'Rootwithbackendid';
  childwithbackendids: Array<Childwithbackendid>;
  childwithbackendids_aggregate?: Maybe<AggregationResult>;
  childwithclientids: Array<Childwithclientid>;
  childwithclientids_aggregate?: Maybe<AggregationResult>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
};


export type RootwithbackendidChildwithbackendidsArgs = {
  filter?: InputMaybe<ChildwithbackendidsListFilter>;
};


export type RootwithbackendidChildwithbackendids_AggregateArgs = {
  filter?: InputMaybe<ChildwithbackendidsListFilter>;
};


export type RootwithbackendidChildwithclientidsArgs = {
  filter?: InputMaybe<ChildwithclientidsListFilter>;
};


export type RootwithbackendidChildwithclientids_AggregateArgs = {
  filter?: InputMaybe<ChildwithclientidsListFilter>;
};

/** Data needed to create or update Rootwithbackendids. If an ID is passed, this is an update, otherwise it's an insert. */
export type RootwithbackendidCreateOrUpdateInput = {
  childwithbackendids?: InputMaybe<Array<ChildwithbackendidCreateOrUpdateInput>>;
  childwithclientids?: InputMaybe<Array<ChildwithclientidCreateOrUpdateInput>>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Data needed to create Rootwithbackendids. */
export type RootwithbackendidInsertInput = {
  childwithbackendids?: InputMaybe<Array<ChildwithbackendidCreateOrUpdateInput>>;
  childwithclientids?: InputMaybe<Array<ChildwithclientidCreateOrUpdateInput>>;
  description?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to update Rootwithbackendids. An ID must be passed. */
export type RootwithbackendidUpdateInput = {
  childwithbackendids?: InputMaybe<Array<ChildwithbackendidCreateOrUpdateInput>>;
  childwithclientids?: InputMaybe<Array<ChildwithclientidCreateOrUpdateInput>>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

export type RootwithbackendidsListFilter = {
  _and?: InputMaybe<Array<InputMaybe<RootwithbackendidsListFilter>>>;
  _not?: InputMaybe<RootwithbackendidsListFilter>;
  _or?: InputMaybe<Array<InputMaybe<RootwithbackendidsListFilter>>>;
  childwithbackendids?: InputMaybe<ChildwithbackendidsListFilter>;
  childwithclientids?: InputMaybe<ChildwithclientidsListFilter>;
  description?: InputMaybe<Scalars['String']['input']>;
  description_gt?: InputMaybe<Scalars['String']['input']>;
  description_gte?: InputMaybe<Scalars['String']['input']>;
  description_ilike?: InputMaybe<Scalars['String']['input']>;
  description_in?: InputMaybe<Array<Scalars['String']['input']>>;
  description_like?: InputMaybe<Scalars['String']['input']>;
  description_lt?: InputMaybe<Scalars['String']['input']>;
  description_lte?: InputMaybe<Scalars['String']['input']>;
  description_ne?: InputMaybe<Scalars['String']['input']>;
  description_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  description_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  description_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RootwithbackendidsOrderByInput = {
  description?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
};

/** Pagination options for Rootwithbackendids. */
export type RootwithbackendidsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<RootwithbackendidsOrderByInput>;
};

export type Rootwithclientid = {
  __typename?: 'Rootwithclientid';
  childwithbackendids: Array<Childwithbackendid>;
  childwithbackendids_aggregate?: Maybe<AggregationResult>;
  childwithclientids: Array<Childwithclientid>;
  childwithclientids_aggregate?: Maybe<AggregationResult>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
};


export type RootwithclientidChildwithbackendidsArgs = {
  filter?: InputMaybe<ChildwithbackendidsListFilter>;
};


export type RootwithclientidChildwithbackendids_AggregateArgs = {
  filter?: InputMaybe<ChildwithbackendidsListFilter>;
};


export type RootwithclientidChildwithclientidsArgs = {
  filter?: InputMaybe<ChildwithclientidsListFilter>;
};


export type RootwithclientidChildwithclientids_AggregateArgs = {
  filter?: InputMaybe<ChildwithclientidsListFilter>;
};

/** Data needed to create or update Rootwithclientids. If an ID is passed, this is an update, otherwise it's an insert. */
export type RootwithclientidCreateOrUpdateInput = {
  childwithbackendids?: InputMaybe<Array<ChildwithbackendidCreateOrUpdateInput>>;
  childwithclientids?: InputMaybe<Array<ChildwithclientidCreateOrUpdateInput>>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Data needed to create Rootwithclientids. */
export type RootwithclientidInsertInput = {
  childwithbackendids?: InputMaybe<Array<ChildwithbackendidCreateOrUpdateInput>>;
  childwithclientids?: InputMaybe<Array<ChildwithclientidCreateOrUpdateInput>>;
  description?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to update Rootwithclientids. An ID must be passed. */
export type RootwithclientidUpdateInput = {
  childwithbackendids?: InputMaybe<Array<ChildwithbackendidCreateOrUpdateInput>>;
  childwithclientids?: InputMaybe<Array<ChildwithclientidCreateOrUpdateInput>>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

export type RootwithclientidsListFilter = {
  _and?: InputMaybe<Array<InputMaybe<RootwithclientidsListFilter>>>;
  _not?: InputMaybe<RootwithclientidsListFilter>;
  _or?: InputMaybe<Array<InputMaybe<RootwithclientidsListFilter>>>;
  childwithbackendids?: InputMaybe<ChildwithbackendidsListFilter>;
  childwithclientids?: InputMaybe<ChildwithclientidsListFilter>;
  description?: InputMaybe<Scalars['String']['input']>;
  description_gt?: InputMaybe<Scalars['String']['input']>;
  description_gte?: InputMaybe<Scalars['String']['input']>;
  description_ilike?: InputMaybe<Scalars['String']['input']>;
  description_in?: InputMaybe<Array<Scalars['String']['input']>>;
  description_like?: InputMaybe<Scalars['String']['input']>;
  description_lt?: InputMaybe<Scalars['String']['input']>;
  description_lte?: InputMaybe<Scalars['String']['input']>;
  description_ne?: InputMaybe<Scalars['String']['input']>;
  description_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  description_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  description_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RootwithclientidsOrderByInput = {
  description?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
};

/** Pagination options for Rootwithclientids. */
export type RootwithclientidsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<RootwithclientidsOrderByInput>;
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}
